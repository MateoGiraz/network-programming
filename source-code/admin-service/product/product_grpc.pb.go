// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SaleServiceClient is the client API for SaleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SaleServiceClient interface {
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	BuyProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error)
	GetRating(ctx context.Context, in *Product, opts ...grpc.CallOption) (*RatingResponse, error)
}

type saleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaleServiceClient(cc grpc.ClientConnInterface) SaleServiceClient {
	return &saleServiceClient{cc}
}

func (c *saleServiceClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/product.SaleService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/product.SaleService/UpdateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) DeleteProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/product.SaleService/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) BuyProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/product.SaleService/BuyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *saleServiceClient) GetRating(ctx context.Context, in *Product, opts ...grpc.CallOption) (*RatingResponse, error) {
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, "/product.SaleService/GetRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaleServiceServer is the server API for SaleService service.
// All implementations must embed UnimplementedSaleServiceServer
// for forward compatibility
type SaleServiceServer interface {
	CreateProduct(context.Context, *Product) (*ProductResponse, error)
	UpdateProduct(context.Context, *Product) (*ProductResponse, error)
	DeleteProduct(context.Context, *Product) (*ProductResponse, error)
	BuyProduct(context.Context, *Product) (*ProductResponse, error)
	GetRating(context.Context, *Product) (*RatingResponse, error)
	mustEmbedUnimplementedSaleServiceServer()
}

// UnimplementedSaleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSaleServiceServer struct {
}

func (UnimplementedSaleServiceServer) CreateProduct(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedSaleServiceServer) UpdateProduct(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedSaleServiceServer) DeleteProduct(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedSaleServiceServer) BuyProduct(context.Context, *Product) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyProduct not implemented")
}
func (UnimplementedSaleServiceServer) GetRating(context.Context, *Product) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRating not implemented")
}
func (UnimplementedSaleServiceServer) mustEmbedUnimplementedSaleServiceServer() {}

// UnsafeSaleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SaleServiceServer will
// result in compilation errors.
type UnsafeSaleServiceServer interface {
	mustEmbedUnimplementedSaleServiceServer()
}

func RegisterSaleServiceServer(s grpc.ServiceRegistrar, srv SaleServiceServer) {
	s.RegisterService(&SaleService_ServiceDesc, srv)
}

func _SaleService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.SaleService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.SaleService/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.SaleService/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).DeleteProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_BuyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).BuyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.SaleService/BuyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).BuyProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _SaleService_GetRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaleServiceServer).GetRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.SaleService/GetRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaleServiceServer).GetRating(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// SaleService_ServiceDesc is the grpc.ServiceDesc for SaleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SaleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.SaleService",
	HandlerType: (*SaleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _SaleService_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _SaleService_UpdateProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _SaleService_DeleteProduct_Handler,
		},
		{
			MethodName: "BuyProduct",
			Handler:    _SaleService_BuyProduct_Handler,
		},
		{
			MethodName: "GetRating",
			Handler:    _SaleService_GetRating_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
